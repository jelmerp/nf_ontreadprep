manifest {
    description = 'Nextflow Workflow to prep ONT reads for assembly' 
    author = 'Jelmer Poelstra'
}

//includeConfig conf/base.config

// Param defaults
params {
    outdir                      =   "results/nf_asm_prep"

    fast5_dir                   =   false
    guppy_config                =   false
    ref_assembly                =   false
    
    contig_blacklist            =   false
    pyco_minq                   =   10
    pyco_minlen                 =   1000

    tracedir                    =   "$params.outdir/trace"
    help                        =   false
    version                     =   false
}

process {
    executor                    =   'slurm'
    clusterOptions              =   '--account=PAS0471'
    errorStrategy               =   { task.attempt <= 2 ? 'retry' : 'terminate' }
    maxRetries                  =   2

    withLabel: 'local_process' {
        executor                =   'local'
        cpus                    =   1
        memory                  =   '4 GB'
    }

    withName: 'GUPPY' {
        clusterOptions          =   '--account=PAS0471 --gpus-per-node=2'
        cpus                    =   1
        memory                  =   4.GB
        time                    =   1.hour
    }
    
    withName: 'PYCOQC' {
        conda                   =  "/fs/ess/PAS0471/jelmer/conda/pycoqc-2.5.2"
    }
}

// Profiles
profiles {
    local {
        process {
            executor        =   'local'
        }
    }

    normal {
        process {
            cpus                =   { 8 * task.attempt }
            memory              =   { 32.GB * task.attempt }
            time                =   { 5.hour * task.attempt }
        }
    }

    test {
        process {
            maxRetries          =   0
            time                =   { 1.hour * task.attempt }
            memory              =   { 4.GB * task.attempt }
            cpus                =   { 1 * task.attempt }
        }
    }
}

// Enable reports and have better filenames
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
